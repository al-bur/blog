{"componentChunkName":"component---src-templates-blog-post-js","path":"/기타/github-action-활용해서-build후-github-page-배포하기/","result":{"data":{"site":{"siteMetadata":{"title":"love steady","author":"albur","siteUrl":"https://al-bur.github.io","comment":{"disqusShortName":"","utterances":"al-bur/"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"fbcd12e9-a6bb-5cb2-82ce-db413cca6f03","excerpt":"자동차 경주 미션에서 미션을 다 끝낸 후 웹사이트를 사용해볼 수 있도록 github에서 제공하는 github page 기능을 이용해 웹 사이트를 배포하였습니다. 이번 로또 미션에도 똑같이 웹 사이트를 배포하였습니다. 그런데, 이번 미션에서는 webpack을 활용해서 build를 해주도록 하였기 때문에 index.html에 script 태그를 넣지 않았습니다. 그러다보니  검색을 해보니 자동으로 build 후 배포가 되도록 해줘야한다는 것입니다. 검색 결과, 를 이용해서 배포 전에 스스로 build…","html":"<p>자동차 경주 미션에서 미션을 다 끝낸 후 웹사이트를 사용해볼 수 있도록 github에서 제공하는 github page 기능을 이용해 웹 사이트를 배포하였습니다. 이번 로또 미션에도 똑같이 웹 사이트를 배포하였습니다.</p>\n<p>그런데, 이번 미션에서는 webpack을 활용해서 build를 해주도록 하였기 때문에 index.html에 script 태그를 넣지 않았습니다. 그러다보니 <code class=\"language-text\">기본적인 github page 기능을 사용하면 html만 덩그러니 배포되는 것을 알게 되었습니다.</code> 검색을 해보니 자동으로 build 후 배포가 되도록 해줘야한다는 것입니다.</p>\n<p>검색 결과, <code class=\"language-text\">github workflow</code>를 이용해서 배포 전에 스스로 build를 할 수 있도록 설정해주어야 했습니다.</p>\n<h2 id=\"github-action을-활용하여-build후-배포하기\" style=\"position:relative;\"><a href=\"#github-action%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-build%ED%9B%84-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\" aria-label=\"github action을 활용하여 build후 배포하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>github action을 활용하여 build후 배포하기</h2>\n<ol>\n<li>먼저, 작업물 branch 최상단 루트에 .github/workflows라는 디렉토리를 만듭니다. 그리고 하위에 <code class=\"language-text\">main.yml(파일명은 아무거나 상관없습니다)을 하나 만들어줍니다.</code> 이 파일은 설명서라고 보시면 됩니다.</li>\n</ol>\n<br>\n<ol start=\"2\">\n<li>yml 파일에 workflow를 작성해주면 됩니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and GH<span class=\"token punctuation\">-</span>Page Deploy\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> practice\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">persist-credentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          npm run build</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to GH Page\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> JamesIves/github<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>deploy<span class=\"token punctuation\">-</span>action@4.1.1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> deploy\n          <span class=\"token key atrule\">folder</span><span class=\"token punctuation\">:</span> dist</code></pre></div>\n<p>하나하나 설명해보자면 먼저 <code class=\"language-text\">practice라는 branch에 push가 감지되면 jobs</code>를 실행시켜준다라고 보면 됩니다.</p>\n<p>이후 checkout(practice 레포에서 가장 최신의 코드를 클론한다), install(dependencies 설치한다), Build(빌드한다), Deploy(dist 폴더에 빌드한 파일을 deploy라는 브랜치에 푸시한다)를 따르도록 설정해주었습니다.</p>\n<br>\n<ol start=\"3\">\n<li>이렇게 하면 deploy라는 branch가 생성되고 settings에서 deploy branch를 사용하여 배포하라고 설정해주면 정상적으로 배포가 됩니다.</li>\n</ol>","frontmatter":{"title":"github action 활용해서 build후 github page 배포하기","date":"February 24, 2022"}}},"pageContext":{"slug":"/기타/github-action-활용해서-build후-github-page-배포하기/","previous":{"fields":{"slug":"/우아한테크코스/[우테코]level1-자동차-경주-게임-미션-회고/"},"frontmatter":{"title":"[우테코] level1 - 자동차 경주 게임 미션 회고"}},"next":{"fields":{"slug":"/우아한테크코스/[우테코]level1-로또-미션-회고/"},"frontmatter":{"title":"[우테코] level1 - 로또 미션 회고"}}}}}